using Symbolics
using DoubleExponentialFormulas, CSV
@variables M, m_0, ξ, ϵ_σ, ϵ_r, R̃, ε, U_λ, α,  β,v, λ, _ξ_, λ_c,φ

# Set global precision to 346 bits
setprecision(BigFloat, 426) # it corresponds to mathematica working precision 128

# Define the function X with high precision
X(ξ, ε, λ, α) = quadde(_ξ_ -> 
    (λ + (α*ε)/(1-2/_ξ_)) / 
    (((α^2)/(1-2/_ξ_) + _ξ_^2) * sqrt(ε^2 - (1-2/_ξ_)*(1+λ^2/_ξ_^2) - (α^2+2*ε*λ*α)/(_ξ_^2))),
    BigFloat(ξ), BigFloat(Inf); rtol = 1e-5
)[1]

# Initialize data array
data = []

# Run calculations
for i in 1:100
    # Generate random values with high precision
    ksi = abs(BigFloat(rand(9:100)))
    eps = abs(BigFloat(rand(1:20)))
    lambda = abs(BigFloat(rand(1:20)))

    temp = []
    push!(temp, ksi)
    push!(temp, eps)
    push!(temp, lambda)
    push!(temp, 0)  # Initial value for alpha

    try
        # Calculate the result and the elapsed time
        result = X(ksi, eps, lambda, 0)
        t = @elapsed X(ksi, eps, lambda, 0)

        # Append results to the temp array
        push!(temp, result)
        push!(temp, t)
        push!(data, Tuple(temp))
    catch e_rror
        if isa(e_rror, DomainError)
            println("DomainError")
        end
    end
end

# Display the data
#println(data)

CSV.write("/home/korizekori/magisterka/Julia_DATA.csv", data, header = ["ξ","ε","λ", "α", "Result (Julia)", "Elapsed time in Julia[s]"])
